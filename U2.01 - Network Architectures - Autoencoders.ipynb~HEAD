{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dimension de las imagenes y las clases (1500, 784) (1500,)\n"
     ]
    }
   ],
   "source": [
    "mnist = pd.read_csv(\"data/mnist1.5k.csv.gz\", compression=\"gzip\", header=None).values\n",
    "X=mnist[:,1:785]/255.\n",
    "y=mnist[:,0]\n",
    "print \"dimension de las imagenes y las clases\", X.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 50 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "perm = np.random.permutation(range(X.shape[0]))[0:50]\n",
    "random_imgs   = X[perm]\n",
    "random_labels = y[perm] \n",
    "fig = plt.figure(figsize=(10,6))\n",
    "for i in range(random_imgs.shape[0]):\n",
    "    ax=fig.add_subplot(5,10,i+1)\n",
    "    plt.imshow(random_imgs[i].reshape(28,28), interpolation=\"nearest\", cmap = plt.cm.Greys_r)\n",
    "    ax.set_title(int(random_labels[i]))\n",
    "    ax.set_xticklabels([])\n",
    "    ax.set_yticklabels([])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Autoencoder for compression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test = train_test_split(X, test_size=.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Flatten\n",
    "from tensorflow.keras.backend import clear_session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model_A(input_dim, hidden_size, code_size):\n",
    "    clear_session()\n",
    "    model = Sequential()\n",
    "    model.add(Dense(hidden_size, activation='relu', input_dim=input_dim))\n",
    "    model.add(Dense(code_size, activation='relu'))\n",
    "    model.add(Dense(hidden_size, activation='relu'))\n",
    "    model.add(Dense(input_dim, activation='sigmoid'))\n",
    "\n",
    "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "    model.reset_states()\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "porqué sigmoide en la última capa. qué pasaría si ponemos tanh o linear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 256)               200960    \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 24)                6168      \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 256)               6400      \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 784)               201488    \n",
      "=================================================================\n",
      "Total params: 415,016\n",
      "Trainable params: 415,016\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = get_model_A(input_dim=X.shape[1], hidden_size=256, code_size=24)\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "try with larger layer, try with more layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1200/1200 [==============================] - 1s 1ms/step - loss: 0.1137\n",
      "Epoch 2/100\n",
      "1200/1200 [==============================] - 0s 345us/step - loss: 0.0660\n",
      "Epoch 3/100\n",
      "1200/1200 [==============================] - 0s 337us/step - loss: 0.0545\n",
      "Epoch 4/100\n",
      "1200/1200 [==============================] - 0s 323us/step - loss: 0.0450\n",
      "Epoch 5/100\n",
      "1200/1200 [==============================] - 0s 339us/step - loss: 0.0391\n",
      "Epoch 6/100\n",
      "1200/1200 [==============================] - 0s 329us/step - loss: 0.0349\n",
      "Epoch 7/100\n",
      "1200/1200 [==============================] - 0s 331us/step - loss: 0.0318\n",
      "Epoch 8/100\n",
      "1200/1200 [==============================] - 1s 453us/step - loss: 0.0296\n",
      "Epoch 9/100\n",
      "1200/1200 [==============================] - 1s 510us/step - loss: 0.0278\n",
      "Epoch 10/100\n",
      "1200/1200 [==============================] - 0s 395us/step - loss: 0.0261\n",
      "Epoch 11/100\n",
      "1200/1200 [==============================] - 0s 357us/step - loss: 0.0246\n",
      "Epoch 12/100\n",
      "1200/1200 [==============================] - 0s 338us/step - loss: 0.0234\n",
      "Epoch 13/100\n",
      "1200/1200 [==============================] - 0s 319us/step - loss: 0.0222\n",
      "Epoch 14/100\n",
      "1200/1200 [==============================] - 0s 333us/step - loss: 0.0213\n",
      "Epoch 15/100\n",
      "1200/1200 [==============================] - 0s 333us/step - loss: 0.0203\n",
      "Epoch 16/100\n",
      "1200/1200 [==============================] - 0s 336us/step - loss: 0.0195\n",
      "Epoch 17/100\n",
      "1200/1200 [==============================] - 0s 320us/step - loss: 0.0188\n",
      "Epoch 18/100\n",
      "1200/1200 [==============================] - 0s 339us/step - loss: 0.0182\n",
      "Epoch 19/100\n",
      "1200/1200 [==============================] - 0s 317us/step - loss: 0.0176\n",
      "Epoch 20/100\n",
      "1200/1200 [==============================] - 0s 322us/step - loss: 0.0172\n",
      "Epoch 21/100\n",
      "1200/1200 [==============================] - 0s 351us/step - loss: 0.0167\n",
      "Epoch 22/100\n",
      "1200/1200 [==============================] - 0s 362us/step - loss: 0.0164\n",
      "Epoch 23/100\n",
      "1200/1200 [==============================] - 0s 334us/step - loss: 0.0159\n",
      "Epoch 24/100\n",
      "1200/1200 [==============================] - 0s 327us/step - loss: 0.0156\n",
      "Epoch 25/100\n",
      "1200/1200 [==============================] - 0s 338us/step - loss: 0.0152\n",
      "Epoch 26/100\n",
      "1200/1200 [==============================] - 0s 339us/step - loss: 0.0149\n",
      "Epoch 27/100\n",
      "1200/1200 [==============================] - 0s 335us/step - loss: 0.0145\n",
      "Epoch 28/100\n",
      "1200/1200 [==============================] - 0s 344us/step - loss: 0.0143\n",
      "Epoch 29/100\n",
      "1200/1200 [==============================] - 1s 475us/step - loss: 0.0139\n",
      "Epoch 30/100\n",
      "1200/1200 [==============================] - 1s 501us/step - loss: 0.0137\n",
      "Epoch 31/100\n",
      "1200/1200 [==============================] - 1s 644us/step - loss: 0.0135\n",
      "Epoch 32/100\n",
      "1200/1200 [==============================] - 1s 664us/step - loss: 0.0131\n",
      "Epoch 33/100\n",
      "1200/1200 [==============================] - 1s 466us/step - loss: 0.0129\n",
      "Epoch 34/100\n",
      "1200/1200 [==============================] - 0s 383us/step - loss: 0.0127\n",
      "Epoch 35/100\n",
      "1200/1200 [==============================] - 0s 411us/step - loss: 0.0126\n",
      "Epoch 36/100\n",
      "1200/1200 [==============================] - 1s 547us/step - loss: 0.0123\n",
      "Epoch 37/100\n",
      "1200/1200 [==============================] - 0s 365us/step - loss: 0.0121\n",
      "Epoch 38/100\n",
      "1200/1200 [==============================] - 0s 372us/step - loss: 0.0119\n",
      "Epoch 39/100\n",
      "1200/1200 [==============================] - 0s 405us/step - loss: 0.0116\n",
      "Epoch 40/100\n",
      "1200/1200 [==============================] - 0s 359us/step - loss: 0.0116\n",
      "Epoch 41/100\n",
      "1200/1200 [==============================] - 1s 488us/step - loss: 0.0114\n",
      "Epoch 42/100\n",
      "1200/1200 [==============================] - 0s 336us/step - loss: 0.0112\n",
      "Epoch 43/100\n",
      "1200/1200 [==============================] - 0s 411us/step - loss: 0.0111\n",
      "Epoch 44/100\n",
      "1200/1200 [==============================] - 0s 414us/step - loss: 0.0109\n",
      "Epoch 45/100\n",
      "1200/1200 [==============================] - 0s 322us/step - loss: 0.0107\n",
      "Epoch 46/100\n",
      "1200/1200 [==============================] - 0s 320us/step - loss: 0.0106\n",
      "Epoch 47/100\n",
      "1200/1200 [==============================] - 1s 425us/step - loss: 0.0105\n",
      "Epoch 48/100\n",
      "1200/1200 [==============================] - 1s 490us/step - loss: 0.0104\n",
      "Epoch 49/100\n",
      "1200/1200 [==============================] - 0s 398us/step - loss: 0.0102\n",
      "Epoch 50/100\n",
      "1200/1200 [==============================] - 0s 369us/step - loss: 0.0101\n",
      "Epoch 51/100\n",
      "1200/1200 [==============================] - 0s 320us/step - loss: 0.0100\n",
      "Epoch 52/100\n",
      "1200/1200 [==============================] - 0s 330us/step - loss: 0.0098\n",
      "Epoch 53/100\n",
      "1200/1200 [==============================] - 0s 345us/step - loss: 0.0097\n",
      "Epoch 54/100\n",
      "1200/1200 [==============================] - 0s 318us/step - loss: 0.0096\n",
      "Epoch 55/100\n",
      "1200/1200 [==============================] - 0s 314us/step - loss: 0.0095\n",
      "Epoch 56/100\n",
      "1200/1200 [==============================] - 0s 376us/step - loss: 0.0094\n",
      "Epoch 57/100\n",
      "1200/1200 [==============================] - 0s 336us/step - loss: 0.0093\n",
      "Epoch 58/100\n",
      "1200/1200 [==============================] - 1s 504us/step - loss: 0.0092\n",
      "Epoch 59/100\n",
      "1200/1200 [==============================] - 0s 386us/step - loss: 0.0091\n",
      "Epoch 60/100\n",
      "1200/1200 [==============================] - 1s 422us/step - loss: 0.0090\n",
      "Epoch 61/100\n",
      "1200/1200 [==============================] - 0s 329us/step - loss: 0.0089\n",
      "Epoch 62/100\n",
      "1200/1200 [==============================] - 0s 327us/step - loss: 0.0088\n",
      "Epoch 63/100\n",
      "1200/1200 [==============================] - 0s 336us/step - loss: 0.0087\n",
      "Epoch 64/100\n",
      "1200/1200 [==============================] - 0s 346us/step - loss: 0.0086\n",
      "Epoch 65/100\n",
      "1200/1200 [==============================] - 0s 343us/step - loss: 0.0085\n",
      "Epoch 66/100\n",
      "1200/1200 [==============================] - 1s 544us/step - loss: 0.0084\n",
      "Epoch 67/100\n",
      "1200/1200 [==============================] - 1s 481us/step - loss: 0.0084\n",
      "Epoch 68/100\n",
      "1200/1200 [==============================] - 1s 434us/step - loss: 0.0083\n",
      "Epoch 69/100\n",
      "1200/1200 [==============================] - 0s 375us/step - loss: 0.0082\n",
      "Epoch 70/100\n",
      "1200/1200 [==============================] - 0s 325us/step - loss: 0.0081\n",
      "Epoch 71/100\n",
      "1200/1200 [==============================] - 0s 326us/step - loss: 0.0081\n",
      "Epoch 72/100\n",
      "1200/1200 [==============================] - 1s 446us/step - loss: 0.0080\n",
      "Epoch 73/100\n",
      "1200/1200 [==============================] - 0s 406us/step - loss: 0.0079\n",
      "Epoch 74/100\n",
      "1200/1200 [==============================] - 1s 485us/step - loss: 0.0078\n",
      "Epoch 75/100\n",
      "1200/1200 [==============================] - 1s 547us/step - loss: 0.0078\n",
      "Epoch 76/100\n",
      "1200/1200 [==============================] - 0s 380us/step - loss: 0.0077\n",
      "Epoch 77/100\n",
      "1200/1200 [==============================] - 1s 523us/step - loss: 0.0076\n",
      "Epoch 78/100\n",
      "1200/1200 [==============================] - 1s 457us/step - loss: 0.0076\n",
      "Epoch 79/100\n",
      "1200/1200 [==============================] - 1s 422us/step - loss: 0.0075\n",
      "Epoch 80/100\n",
      "1200/1200 [==============================] - 0s 325us/step - loss: 0.0074\n",
      "Epoch 81/100\n",
      "1200/1200 [==============================] - 0s 394us/step - loss: 0.0074\n",
      "Epoch 82/100\n",
      "1200/1200 [==============================] - 0s 385us/step - loss: 0.0073\n",
      "Epoch 83/100\n",
      "1200/1200 [==============================] - 0s 369us/step - loss: 0.0072\n",
      "Epoch 84/100\n",
      "1200/1200 [==============================] - 0s 402us/step - loss: 0.0073\n",
      "Epoch 85/100\n",
      "1200/1200 [==============================] - 0s 390us/step - loss: 0.0072\n",
      "Epoch 86/100\n",
      "1200/1200 [==============================] - 0s 352us/step - loss: 0.0071\n",
      "Epoch 87/100\n",
      "1200/1200 [==============================] - 0s 354us/step - loss: 0.0071\n",
      "Epoch 88/100\n",
      "1200/1200 [==============================] - 0s 406us/step - loss: 0.0070\n",
      "Epoch 89/100\n",
      "1200/1200 [==============================] - 0s 313us/step - loss: 0.0069\n",
      "Epoch 90/100\n",
      "1200/1200 [==============================] - 0s 409us/step - loss: 0.0069\n",
      "Epoch 91/100\n",
      "1200/1200 [==============================] - 0s 342us/step - loss: 0.0069\n",
      "Epoch 92/100\n",
      "1200/1200 [==============================] - 0s 394us/step - loss: 0.0067\n",
      "Epoch 93/100\n",
      "1200/1200 [==============================] - 0s 347us/step - loss: 0.0067\n",
      "Epoch 94/100\n",
      "1200/1200 [==============================] - 1s 486us/step - loss: 0.0066\n",
      "Epoch 95/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1200/1200 [==============================] - 0s 322us/step - loss: 0.0067\n",
      "Epoch 96/100\n",
      "1200/1200 [==============================] - 1s 425us/step - loss: 0.0066\n",
      "Epoch 97/100\n",
      "1200/1200 [==============================] - 0s 332us/step - loss: 0.0066\n",
      "Epoch 98/100\n",
      "1200/1200 [==============================] - 0s 320us/step - loss: 0.0064\n",
      "Epoch 99/100\n",
      "1200/1200 [==============================] - 0s 330us/step - loss: 0.0064\n",
      "Epoch 100/100\n",
      "1200/1200 [==============================] - 0s 344us/step - loss: 0.0064\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7ff0570923d0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, X_train, epochs=100, batch_size=32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### show reconstruction on sampled test images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_sample = np.random.permutation(X_test)[:10]\n",
    "X_pred   = model.predict(X_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,5))\n",
    "for i in range(len(X_sample)):\n",
    "    plt.subplot(2,len(X_sample),i+1)\n",
    "    plt.imshow(X_sample[i].reshape(28,28), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n",
    "    plt.subplot(2,len(X_sample),len(X_sample)+i+1)\n",
    "    plt.imshow(X_pred[i].reshape(28,28), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### show encodings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Tensor Tensor(\"dense_1/Relu:0\", shape=(?, 24), dtype=float32) is not an element of this graph.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m\u001b[0m",
      "\u001b[0;31mValueError\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-1fb2a13fcacb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mbackend\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mclear_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0ml1_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlearning_phase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/miniconda/lib/python2.7/site-packages/keras/backend/tensorflow_backend.pyc\u001b[0m in \u001b[0;36mfunction\u001b[0;34m(inputs, outputs, updates, **kwargs)\u001b[0m\n\u001b[1;32m   2742\u001b[0m                 \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Invalid argument \"%s\" passed to K.function with TensorFlow backend'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2743\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2744\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mFunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupdates\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mupdates\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2745\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2746\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/miniconda/lib/python2.7/site-packages/keras/backend/tensorflow_backend.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, inputs, outputs, updates, name, **session_kwargs)\u001b[0m\n\u001b[1;32m   2544\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2545\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2546\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_dependencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2547\u001b[0m             \u001b[0mupdates_ops\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2548\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mupdate\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mupdates\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/miniconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36mcontrol_dependencies\u001b[0;34m(control_inputs)\u001b[0m\n\u001b[1;32m   5058\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m_NullContextmanager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5059\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5060\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mget_default_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_dependencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontrol_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5061\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5062\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/miniconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36mcontrol_dependencies\u001b[0;34m(self, control_inputs)\u001b[0m\n\u001b[1;32m   4662\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexedSlices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4663\u001b[0m         \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4664\u001b[0;31m       \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_graph_element\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4665\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4666\u001b[0m         \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/miniconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36mas_graph_element\u001b[0;34m(self, obj, allow_tensor, allow_operation)\u001b[0m\n\u001b[1;32m   3611\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3612\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3613\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_as_graph_element_locked\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_tensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_operation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3614\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3615\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_as_graph_element_locked\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_tensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_operation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/miniconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc\u001b[0m in \u001b[0;36m_as_graph_element_locked\u001b[0;34m(self, obj, allow_tensor, allow_operation)\u001b[0m\n\u001b[1;32m   3690\u001b[0m       \u001b[0;31m# Actually obj is just the object it's referring to.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3691\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3692\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Tensor %s is not an element of this graph.\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3693\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3694\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mOperation\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mallow_operation\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Tensor Tensor(\"dense_1/Relu:0\", shape=(?, 24), dtype=float32) is not an element of this graph."
     ]
    }
   ],
   "source": [
    "from keras import backend as K\n",
    "clear_session()\n",
    "l1_output = K.function([model.input, K.learning_phase()], [model.layers[1].output])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_sample_encoded = l1_output([X_sample,1.])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(20,2))\n",
    "for i in range(len(X_sample)):\n",
    "    plt.subplot(1,len(X_sample),i+1)\n",
    "    plt.imshow(X_sample_encoded[i].reshape(4,-1), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Autoencoder for image denoising\n",
    "\n",
    "observe reconstruction when fed with noisy data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_noise(x, noise_level=.2):\n",
    "    return x + np.random.normal(size=x.shape)*noise_level"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_sample_noisy = add_noise(X_sample)\n",
    "X_pred_noisy   = model.predict(X_sample_noisy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(20,5))\n",
    "for i in range(len(X_sample_noisy)):\n",
    "    plt.subplot(2,len(X_sample_noisy),i+1)\n",
    "    plt.imshow(X_sample_noisy[i].reshape(28,28), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n",
    "    plt.subplot(2,len(X_sample_noisy),len(X_sample_noisy)+i+1)\n",
    "    plt.imshow(X_pred_noisy[i].reshape(28,28), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "but if we train with noisy data reconstruction improves\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "n_model = get_model_A(input_dim=X.shape[1], hidden_size=128, code_size=16)\n",
    "X_train_noisy = add_noise(X_train)\n",
    "\n",
    "n_model.fit(X_train_noisy, X_train_noisy, epochs=100, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_sample_noisy = add_noise(X_sample)\n",
    "X_pred_noisy   = n_model.predict(X_sample_noisy)\n",
    "\n",
    "plt.figure(figsize=(20,5))\n",
    "for i in range(len(X_sample_noisy)):\n",
    "    plt.subplot(2,len(X_sample_noisy),i+1)\n",
    "    plt.imshow(X_sample_noisy[i].reshape(28,28), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n",
    "    plt.subplot(2,len(X_sample_noisy),len(X_sample_noisy)+i+1)\n",
    "    plt.imshow(X_pred_noisy[i].reshape(28,28), cmap=plt.cm.Greys_r)\n",
    "    plt.axis(\"off\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
